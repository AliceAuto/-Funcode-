#include "SceneStates.h"
#include "headers\CGameMain.h"
#include "headers\Button.h"

//____________________________________________________________________________________________________________________________________________________________
//============================================================================================================================================================

// [说明]
// MainMenuState 类的实现
// 主菜单状态的具体实现，包括初始化、事件监听的注册和注销、状态的进入和退出，以及更新逻辑
//____________________________________________________________________________________________________________________________________________________________



// [说明]
// 构造函数：初始化主菜单状态
//____________________________________________________________________________________________________________
MainMenuState::MainMenuState(): State() {		
	//在主菜单状态添加一个"无文本绑定"、"位置为(0,0)"、"资源包为<Button_Text&Render>"、"标签为<StartGame>"的按钮
    std::string Button0 = objectManager->CreateObject(
        "{\n"
        "  \"TypeName\"      :           \"Button_Text&Photo\"                ,\n"
        "  \"posX\"          :           0.0                      ,\n"
        "  \"posY\"          :           0.0                      ,\n"
        "  \"resourceBag\"   :           \"Button_Text&Render\"       ,\n"
        "  \"label\"         :           \"StartGame\"              \n"
        "}"
    );
	static_cast<Button*>(objectManager->GetObjectBySpriteName(Button0))->SetClickHandler
		([this]() 
	{
            CGameMain::GetInstance().stateMachine->ToNextState("Game");//为按钮设置处理逻辑,这个意思是会调用这个函数 切换状态 
	}
		);







	//在主菜单状态添加一个"有文本绑定"、"位置为(0,0)"、"资源包为<Button_Text&Render>"、"标签为<StartGame>"的按钮
	std::string Button1 = objectManager->CreateObject(
        "{\n"
        "  \"TypeName\"      :           \"Button_Text&Photo\"                ,\n"
        "  \"posX\"          :           30.0                      ,\n"
        "  \"posY\"          :           0.0                    ,\n"
        "  \"resourceBag\"   :           \"Button_Text&Render\"       ,\n"
        "  \"label\"         :           \"Setting\"              \n"
        "}"
    );
	static_cast<Button*>(objectManager->GetObjectBySpriteName(Button1))->SetClickHandler
		([this]() 
	{
            CGameMain::GetInstance().stateMachine->ToNextState("Settings");//为按钮设置处理逻辑,这个意思是会调用这个函数 切换状态 
	}
		);

}

//____________________________________________________________________________________________________________









// [说明]
// 析构函数：清理主菜单状态（如果需要）
//____________________________________________________________________________________________________________
MainMenuState::~MainMenuState() {
    // 资源清理逻辑（如果需要）
}
//____________________________________________________________________________________________________________











// [说明]
// 注册事件监听器：用于处理按钮点击事件
//_________________________________________________________________________________________
void MainMenuState::RegisterEventListeners() {

}
//_________________________________________________________________________________________










// [说明]
// 注销事件监听器：取消按钮点击事件的监听
//_______________________________________________________________________________________________________________________
void MainMenuState::UnregisterEventListeners(){

}
//_______________________________________________________________________________________________________________________











// [说明]
// Enter 函数：进入主菜单状态，加载场景并注册事件监听器
//____________________________________________________________________________________________________________
void MainMenuState::Enter() {	
    LogManager::Log("已进入主菜单界面");
    CSystem::LoadMap("untitled.t2d");
    objectManager->LoadAllObjects();

}
//____________________________________________________________________________________________________________













// [说明]
// Exit 函数：退出主菜单状态，卸载场景并注销事件监听器
//____________________________________________________________________________________________________________
void MainMenuState::Exit() {
    LogManager::Log("已退出主菜单");

}
//____________________________________________________________________________________________________________














// [说明]
// Update 函数：主菜单状态的更新逻辑
//____________________________________________________________________________________________________________
void MainMenuState::Update(float fDeltaTime) {

}
//____________________________________________________________________________________________________________



























// [说明]
// 创建状态：返回一个新的 MainMenuState 实例
//____________________________________________________________________________________________________________
State* MainMenuState::CreateState() const {
    return new MainMenuState();
}
//____________________________________________________________________________________________________________













//____________________________________________________________________________________________________________________________________________________________
//============================================================================================================================================================

// [说明]
// GameState 类的实现
// 游戏状态的具体实现，包括初始化、状态的进入和退出，以及更新逻辑
//____________________________________________________________________________________________________________________________________________________________



// [说明]
// 构造函数：初始化游戏状态
//____________________________________________________________________________________________________________
GameState::GameState() : State() {
    std::string player1 = objectManager->CreateObject(
        "{\n"
        "  \"TypeName\"      :           \"Player\"                ,\n"
        "  \"posX\"          :           0.0                      ,\n"
        "  \"posY\"          :           0.0                      ,\n"
        "  \"resourceBag\"   :           \"resources1\"            \n"
        "}"
    );

    std::string block1 = objectManager->CreateObject(
        "{\n"
        "  \"TypeName\"      :           \"ObstacleObject\"        ,\n"
        "  \"posX\"          :           0.0                      ,\n"
        "  \"posY\"          :           0.0                      ,\n"
        "  \"resourceBag\"   :           \"block\"                 \n"
        "}"
    );
    
    // 创建更多障碍物
 
}
//____________________________________________________________________________________________________________



// [说明]
// 析构函数：清理游戏状态（如果需要）
//____________________________________________________________________________________________________________
GameState::~GameState() {
    // 资源清理逻辑（如果需要）
}
//____________________________________________________________________________________________________________



// [说明]
// Enter 函数：进入游戏状态，加载场景并初始化所有实体
//____________________________________________________________________________________________________________
void GameState::Enter() {
    LogManager::Log("进入游戏状态");
    CSystem::LoadMap("gameScene.t2d");
    objectManager->LoadAllObjects();
}
//____________________________________________________________________________________________________________



// [说明]
// Exit 函数：退出游戏状态，卸载场景并清理所有实体
//____________________________________________________________________________________________________________
void GameState::Exit() {
    LogManager::Log("退出游戏状态");

}
//____________________________________________________________________________________________________________



// [说明]
// Update 函数：游戏状态的更新逻辑
//____________________________________________________________________________________________________________
void GameState::Update(float fDeltaTime) {

}
//____________________________________________________________________________________________________________



// [说明]
// 创建状态：返回一个新的 GameState 实例
//____________________________________________________________________________________________________________
State* GameState::CreateState() const {
    return new GameState();
}
//____________________________________________________________________________________________________________







//____________________________________________________________________________________________________________________________________________________________
//============================================================================================================================================================

// [说明]
// SettingsMenuState 类的实现
// 设置菜单状态的具体实现，包括状态的进入和退出，以及更新逻辑
//____________________________________________________________________________________________________________________________________________________________



// [说明]
// 构造函数：初始化设置菜单状态
//____________________________________________________________________________________________________________
SettingsMenuState::SettingsMenuState() : State() {}
//____________________________________________________________________________________________________________



// [说明]
// 析构函数：清理设置菜单状态（如果需要）
//____________________________________________________________________________________________________________
SettingsMenuState::~SettingsMenuState() {}
//____________________________________________________________________________________________________________



// [说明]
// Enter 函数：进入设置菜单状态，加载场景
//____________________________________________________________________________________________________________
void SettingsMenuState::Enter() {
    LogManager::Log("进入设置菜单");
    CSystem::LoadMap("settingsMenu.t2d");
}
//____________________________________________________________________________________________________________



// [说明]
// Exit 函数：退出设置菜单状态，清理所有实体
//____________________________________________________________________________________________________________
void SettingsMenuState::Exit() {
    LogManager::Log("退出设置菜单");

}
//____________________________________________________________________________________________________________



// [说明]
// Update 函数：设置菜单状态的更新逻辑
//____________________________________________________________________________________________________________
void SettingsMenuState::Update(float fDeltaTime) {
    // 设置菜单更新逻辑
}
//____________________________________________________________________________________________________________



// [说明]
// 创建状态：返回一个新的 SettingsMenuState 实例
//____________________________________________________________________________________________________________
State* SettingsMenuState::CreateState() const {
    return new SettingsMenuState();
}
//____________________________________________________________________________________________________________







//____________________________________________________________________________________________________________________________________________________________
//============================================================================================================================================================

// [说明]
// PauseMenuState 类的实现
// 暂停菜单状态的具体实现，包括状态的进入和退出，以及更新逻辑
//____________________________________________________________________________________________________________________________________________________________



// [说明]
// 构造函数：初始化暂停菜单状态
//____________________________________________________________________________________________________________
PauseMenuState::PauseMenuState() : State() {}
//____________________________________________________________________________________________________________



// [说明]
// 析构函数：清理暂停菜单状态（如果需要）
//____________________________________________________________________________________________________________
PauseMenuState::~PauseMenuState() {}
//____________________________________________________________________________________________________________



// [说明]
// Enter 函数：进入暂停菜单状态，加载场景
//____________________________________________________________________________________________________________
void PauseMenuState::Enter() {
    LogManager::Log("进入暂停菜单");
    CSystem::LoadMap("pauseMenu.t2d");
}
//____________________________________________________________________________________________________________



// [说明]
// Exit 函数：退出暂停菜单状态，清理所有实体
//____________________________________________________________________________________________________________
void PauseMenuState::Exit() {
    LogManager::Log("退出暂停菜单");
    
}
//____________________________________________________________________________________________________________



// [说明]
// Update 函数：暂停菜单状态的更新逻辑
//____________________________________________________________________________________________________________
void PauseMenuState::Update(float fDeltaTime) {
    // 暂停菜单更新逻辑
}
//____________________________________________________________________________________________________________



// [说明]
// 创建状态：返回一个新的 PauseMenuState 实例
//____________________________________________________________________________________________________________
State* PauseMenuState::CreateState() const {
    return new PauseMenuState();
}
//____________________________________________________________________________________________________________







//____________________________________________________________________________________________________________________________________________________________
//============================================================================================================================================================

// [说明]
// ExitMenuState 类的实现
// 退出菜单状态的具体实现，包括状态的进入和退出，以及更新逻辑
//____________________________________________________________________________________________________________________________________________________________



// [说明]
// 构造函数：初始化退出菜单状态
//____________________________________________________________________________________________________________
ExitMenuState::ExitMenuState() : State() {}
//____________________________________________________________________________________________________________



// [说明]
// 析构函数：清理退出菜单状态（如果需要）
//____________________________________________________________________________________________________________
ExitMenuState::~ExitMenuState() {}
//____________________________________________________________________________________________________________



// [说明]
// Enter 函数：进入退出菜单状态，处理退出游戏的逻辑
//____________________________________________________________________________________________________________
void ExitMenuState::Enter() {
    LogManager::Log("退出游戏");
    // 退出游戏场景加载或初始化
}
//____________________________________________________________________________________________________________



// [说明]
// Exit 函数：退出退出菜单状态，清理所有实体
//____________________________________________________________________________________________________________
void ExitMenuState::Exit() {

}
//____________________________________________________________________________________________________________



// [说明]
// Update 函数：退出菜单状态的更新逻辑
//____________________________________________________________________________________________________________
void ExitMenuState::Update(float fDeltaTime) {
    // 退出菜单更新逻辑
}
//____________________________________________________________________________________________________________



// [说明]
// 创建状态：返回一个新的 ExitMenuState 实例
//____________________________________________________________________________________________________________
State* ExitMenuState::CreateState() const {
    return new ExitMenuState();
}
//____________________________________________________________________________________________________________







//____________________________________________________________________________________________________________________________________________________________
//============================================================================================================================================================

// [说明]
// HighScoreState 类的实现
// 高分状态的具体实现，包括状态的进入和退出，以及更新逻辑
//____________________________________________________________________________________________________________________________________________________________



// [说明]
// 构造函数：初始化高分状态
//____________________________________________________________________________________________________________
HighScoreState::HighScoreState() : State() {}
//____________________________________________________________________________________________________________



// [说明]
// 析构函数：清理高分状态（如果需要）
//____________________________________________________________________________________________________________
HighScoreState::~HighScoreState() {}
//____________________________________________________________________________________________________________



// [说明]
// Enter 函数：进入高分状态，加载高分场景
//____________________________________________________________________________________________________________
void HighScoreState::Enter() {
    LogManager::Log("进入高分状态");
    CSystem::LoadMap("highScore.t2d");
}
//____________________________________________________________________________________________________________



// [说明]
// Exit 函数：退出高分状态
//____________________________________________________________________________________________________________
void HighScoreState::Exit() {
    LogManager::Log("退出高分状态");
}
//____________________________________________________________________________________________________________



// [说明]
// Update 函数：高分状态的更新逻辑
//____________________________________________________________________________________________________________
void HighScoreState::Update(float fDeltaTime) {
    // 高分状态更新逻辑
}
//____________________________________________________________________________________________________________



// [说明]
// 创建状态：返回一个新的 HighScoreState 实例
//____________________________________________________________________________________________________________
State* HighScoreState::CreateState() const {
    return new HighScoreState();
}
//____________________________________________________________________________________________________________