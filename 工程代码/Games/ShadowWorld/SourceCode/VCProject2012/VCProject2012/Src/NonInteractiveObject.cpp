

#include "headers\NonInteractiveObject .h"


//____________________________________________________________________________________________________________________________________________________________
//============================================================================================================================================================

/*
                非交互对象类实现
    该文件实现了 NonInteractiveObject、PhysicalObject 和 ObstacleObject 类
    这些类定义了非交互对象及其派生类的行为和状态
*/
//____________________________________________________________________________________________________________________________________________________________

// [说明]
// 非交互对象类的构造函数
// 参数 initialX 和 initialY 用于设置对象的初始位置，resourceBagName 指定资源包名称
// 初始化非交互对象的特有属性
//____________________________________________________________________________________________________________
NonInteractiveObject::NonInteractiveObject(float initialX, float initialY, const std::string& resourceBagName)
    : Entity(initialX, initialY, resourceBagName) {
    // 初始化非交互对象的特有属性
}
//____________________________________________________________________________________________________________


// [说明]
// 非交互对象类的虚析构函数
// 清理非交互对象的资源
//____________________________________________________________________________________________________________
NonInteractiveObject::~NonInteractiveObject() {
    // 清理非交互对象的资源
}
//____________________________________________________________________________________________________________


// [说明]
// Init 函数：初始化非交互对象
// 调用基类的初始化函数
//____________________________________________________________________________________________________________
void NonInteractiveObject::Init() {
    this->Entity::Init();
}
//____________________________________________________________________________________________________________


// [说明]
// breakdown 函数：清理非交互对象
// 调用基类的资源清理函数
//____________________________________________________________________________________________________________
void NonInteractiveObject::breakdown() {
    // 对非交互对象进行资源清理
    this->Entity::breakdown();
}
//____________________________________________________________________________________________________________


// [说明]
// UpdateState 函数：更新非交互对象的状态
// 实现状态更新的默认逻辑
//____________________________________________________________________________________________________________
void NonInteractiveObject::UpdateState() {
    // 实现状态更新的默认逻辑
}
//____________________________________________________________________________________________________________


// [说明]
// UpdateAnimation 函数：更新非交互对象的动画
// 实现动画更新的默认逻辑
//____________________________________________________________________________________________________________
void NonInteractiveObject::UpdateAnimation() {
    // 实现动画更新的默认逻辑
}
//____________________________________________________________________________________________________________


// [说明]
// UpdateSound 函数：更新非交互对象的声音
// 实现声音更新的默认逻辑
//____________________________________________________________________________________________________________
void NonInteractiveObject::UpdateSound() {
    // 实现声音更新的默认逻辑
}
//____________________________________________________________________________________________________________





//____________________________________________________________________________________________________________________________________________________________
//============================================================================================================================================================

/*
                物理性实体类实现
    该部分实现了 PhysicalObject 类，继承自 NonInteractiveObject，并添加了物理属性
*/
//____________________________________________________________________________________________________________________________________________________________

// [说明]
// 物理性实体类的构造函数
// 初始化物理性实体的特有属性，包括速度 (velocityX 和 velocityY)
// 参数 initialX 和 initialY 用于设置对象的初始位置，resourceBagName 指定资源包名称
//____________________________________________________________________________________________________________
PhysicalObject::PhysicalObject(float initialX, float initialY, const std::string& resourceBagName)
    : NonInteractiveObject(initialX, initialY, resourceBagName), velocityX(0), velocityY(0) {
    // 初始化物理性实体的特有属性
}
//____________________________________________________________________________________________________________


// [说明]
// 物理性实体类的虚析构函数
// 清理物理性实体的资源
//____________________________________________________________________________________________________________
PhysicalObject::~PhysicalObject() {
    // 清理物理性实体的资源
}
//____________________________________________________________________________________________________________


// [说明]
// Init 函数：初始化物理性实体
// 调用基类 NonInteractiveObject 的初始化函数
//____________________________________________________________________________________________________________
void PhysicalObject::Init() {
    this->NonInteractiveObject::Init();
}
//____________________________________________________________________________________________________________


// [说明]
// breakdown 函数：清理物理性实体
// 调用基类 NonInteractiveObject 的资源清理函数
//____________________________________________________________________________________________________________
void PhysicalObject::breakdown() {
    // 对物理性实体进行资源清理
    this->NonInteractiveObject::breakdown();
}
//____________________________________________________________________________________________________________


// [说明]
// UpdateState 函数：更新物理性实体的状态
// 应用物理运算，并调用基类的状态更新函数
//____________________________________________________________________________________________________________
void PhysicalObject::UpdateState() {
    ApplyPhysics(); // 应用物理运算
    NonInteractiveObject::UpdateState(); // 更新状态
}
//____________________________________________________________________________________________________________


// [说明]
// UpdateAnimation 函数：更新物理性实体的动画
// 根据物理状态更新动画
//____________________________________________________________________________________________________________
void PhysicalObject::UpdateAnimation() {
    // 根据物理状态更新动画
    NonInteractiveObject::UpdateAnimation();
}
//____________________________________________________________________________________________________________


// [说明]
// UpdateSound 函数：更新物理性实体的声音
// 根据物理状态更新声音
//____________________________________________________________________________________________________________
void PhysicalObject::UpdateSound() {
    // 根据物理状态更新声音
    NonInteractiveObject::UpdateSound();
}
//____________________________________________________________________________________________________________


// [说明]
// ApplyPhysics 函数：应用物理运算
// 更新位置属性 (posX 和 posY) 基于速度属性 (velocityX 和 velocityY)
//____________________________________________________________________________________________________________
void PhysicalObject::ApplyPhysics() {
    // 应用物理运算
    posX += velocityX;
    posY += velocityY;
}
//____________________________________________________________________________________________________________





//____________________________________________________________________________________________________________________________________________________________
//============================================================================================================================================================

/*
                障碍物实体类实现
    该部分实现了 ObstacleObject 类，继承自 NonInteractiveObject，表示游戏中的障碍物
*/
//____________________________________________________________________________________________________________________________________________________________

// [说明]
// 障碍物实体类的构造函数
// 参数 initialX 和 initialY 用于设置对象的初始位置，resourceBagName 指定资源包名称
// 初始化障碍物实体的特有属性
//____________________________________________________________________________________________________________
ObstacleObject::ObstacleObject(float initialX, float initialY, const std::string& resourceBagName )
    : NonInteractiveObject(initialX, initialY, resourceBagName) {
    // 初始化障碍物实体的特有属性
}
//____________________________________________________________________________________________________________


// [说明]
// Init 函数：初始化障碍物实体
// 调用基类 NonInteractiveObject 的初始化函数
//____________________________________________________________________________________________________________
void ObstacleObject::Init() {
    this->NonInteractiveObject::Init();

}
//____________________________________________________________________________________________________________


// [说明]
// breakdown 函数：清理障碍物实体
// 调用基类 NonInteractiveObject 的资源清理函数
//____________________________________________________________________________________________________________
void ObstacleObject::breakdown() {
    // 对障碍物实体进行资源清理
    this->NonInteractiveObject::breakdown();
}
//____________________________________________________________________________________________________________


// [说明]
// 障碍物实体类的虚析构函数
// 清理障碍物实体的资源
//____________________________________________________________________________________________________________
ObstacleObject::~ObstacleObject() {
    // 清理障碍物实体的资源
}
//____________________________________________________________________________________________________________


// [说明]
// UpdateState 函数：更新障碍物实体的状态
// 障碍物的位置不变，因此不需要更新位置
// 调用基类的状态更新函数
//____________________________________________________________________________________________________________
void ObstacleObject::UpdateState() {
    // 障碍物的位置不变，不需要更新位置
    NonInteractiveObject::UpdateState();
}
//____________________________________________________________________________________________________________
#include <cmath> // For sin and cos functions



// [说明]
// 子弹类的构造函数
// 参数 initialX 和 initialY 用于设置对象的初始位置，resourceBagName 指定资源包名称
// 参数 speed 和 direction 指定子弹的速度和方向
//____________________________________________________________________________________________________________
Bullet::Bullet(float initialX, float initialY, const std::string& resourceBagName, float speed, float direction)
    : NonInteractiveObject(initialX, initialY, resourceBagName), speed(speed), direction(direction) {
    // 初始化子弹的特有属性
}
//____________________________________________________________________________________________________________






// [说明]
// 子弹类的析构函数
// 清理子弹的资源
//____________________________________________________________________________________________________________

Bullet::~Bullet() {
    // 清理子弹的资源
}
//____________________________________________________________________________________________________________






// [说明]
// Init 函数：初始化子弹
// 调用基类 NonInteractiveObject 的初始化函数
//____________________________________________________________________________________________________________
void Bullet::Init() {
    this->NonInteractiveObject::Init();
	velocityX = speed * cos(direction);
	velocityY = speed * sin(direction);
	 this->resourceBagPtr->GetResource<CAnimateSprite>("Entity").get()->SetSpriteLinearVelocity(velocityX,velocityY);
		
}
//____________________________________________________________________________________________________________





// [说明]
// breakdown 函数：清理子弹
// 调用基类 NonInteractiveObject 的资源清理函数
//____________________________________________________________________________________________________________

void Bullet::breakdown() {
    this->NonInteractiveObject::breakdown();
}
//____________________________________________________________________________________________________________






// [说明]
// UpdateState 函数：更新子弹的状态
// 子弹的状态包括其位置的更新
//____________________________________________________________________________________________________________

void Bullet::UpdateState() {

    NonInteractiveObject::UpdateState(); // 调用基类的状态更新函数
}
//____________________________________________________________________________________________________________





// [说明]
// UpdateAnimation 函数：更新子弹的动画
// 可以在这里添加子弹动画更新的逻辑
void Bullet::UpdateAnimation() {
    NonInteractiveObject::UpdateAnimation();
}
//____________________________________________________________________________________________________________





// [说明]
// UpdateSound 函数：更新子弹的声音
// 可以在这里添加子弹声音更新的逻辑
//____________________________________________________________________________________________________________
void Bullet::UpdateSound() {
    NonInteractiveObject::UpdateSound();
}
//____________________________________________________________________________________________________________








