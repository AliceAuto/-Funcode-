/**
 * @(#)JSprite.java
 *
 * JSprite application
 *
 * @author
 * @version 1.00
 */

 package FunCode;

 import FunCode.EngineAPI;
/**
 * �ࣺJSprite
 * ���о���Ļ��ࡣ��������ľ�̬���飬��̬���飬���֣���Ч�Ⱦ��ɴ���̳���ȥ
 * һ���ͼƬ����ӱ���̳���ȥ���ɡ�ֻ������ľ��飬����������ľ��飬����Ҫ�Ӷ�̬����̳���ȥ
 * @author root
 *
 */
public class JSprite
{
	private	String		m_szName;		// ��������

	/**
	 * ���캯������Ҫ����һ���ǿյľ��������ַ��������������ǵ�ͼ��ڷźõľ������֣�����༴���ͼ��ľ����
	 * ����������һ���µľ������֣�����Ҫ���ó�Ա���� CloneSprite������һ�ݾ������ʵ��������ʵ�ʵĵ�ͼ�����������
	 * @param ����szName:��������
	 */
	public JSprite( String szName )
	{
		m_szName = szName;
	}

	/**
	 * GetName
	 * @return ����ֵ�����ؾ�������
	 */
	public String GetName()
	{
		return m_szName;
	}

	/**
	 * CloneSprite������(����)һ�����顣����Ĵ�����ʽ�����ڵ�ͼ�аڷ�һ��������Ϊģ�壬���úø��������Ȼ���ڴ�����ʹ�ô˺�����¡һ��ʵ��
	 * @param ���� szSrcName����ͼ������ģ��ľ�������
	 * @return ����ֵ��true��ʾ��¡�ɹ���false��¡ʧ�ܡ�ʧ�ܵ�ԭ��������ڵ�ͼ��δ�ҵ���Ӧ���ֵľ���
	 */
	public boolean		CloneSprite( String szSrcName )
	{
		return EngineAPI.CloneSprite( szSrcName, GetName() );
	}

	/**
	 * DeleteSprite���ڵ�ͼ��ɾ���뱾����ʵ�������ľ���
	 */
	public void		DeleteSprite()
	{
		EngineAPI.DeleteSprite( GetName() );
	}

	/**
	 * SetSpriteVisible�����þ������ػ�����ʾ(�ɼ����ɼ�)
	 * @param ���� bVisible��true �ɼ� false���ɼ�
	 */
	public void		SetSpriteVisible( boolean bVisible )
	{
		EngineAPI.SetSpriteVisible( GetName(), bVisible );
	}

	/**
	 * IsSpriteVisible����ȡ�þ��鵱ǰ�Ƿ�ɼ�
	 * @return true���ɼ�  false�����ɼ�
	 */
	public boolean		IsSpriteVisible()
	{
		return EngineAPI.IsSpriteVisible( GetName() );
	}

	/**
	 * SetSpriteEnable����ֹ�������øþ��顣����ֹ�ľ��齫�������κ���Ӧ���������ƶ���û����ײ�ȣ��������ڵ�ͼ����ʾ
	 * @param ���� bEnable��true���� false��ֹ
	 */
	public void		SetSpriteEnable( boolean bEnable )
	{
		EngineAPI.SetSpriteEnable( GetName(), bEnable );
	}

	/**
	 * SetSpriteScale�����þ��������ֵ
	 * @param ���� fScale������ֵ������0��ֵ
	 */
	public void		SetSpriteScale(  float fScale )
	{
		EngineAPI.SetSpriteScale( GetName(), fScale );
	}

	/**
	 * IsPointInSprite���ж�ĳ��������Ƿ�λ�ھ����ڲ�
	 * @param ���� fPosX��X�����
	 * @param ���� fPosY��Y�����
	 * @return
	 */
	public boolean 		IsPointInSprite(  float fPosX,  float fPosY )
	{
		return EngineAPI.IsPointInSprite( GetName(), fPosX, fPosY );
	}

	/**
	 * SetSpritePosition�����þ���λ��
	 * @param ���� fPosX��X����
	 * @param ���� fPosY��Y����
	 */
	public void		SetSpritePosition(  float fPosX,  float fPosY )
	{
		EngineAPI.SetSpritePosition( GetName(), fPosX, fPosY );
	}

	/**
	 * SetSpritePositionX��ֻ���þ���X����
	 * @param ���� fPosX��X����
	 */
	public void		SetSpritePositionX(  float fPosX )
	{
		EngineAPI.SetSpritePositionX( GetName(), fPosX );
	}

	/**
	 * SetSpritePositionY��ֻ���þ���Y����
	 * @param ���� fPosY��Y����
	 */
	public void		SetSpritePositionY(  float fPosY )
	{
		EngineAPI.SetSpritePositionY( GetName(), fPosY );
	}

	/**
	 * GetSpritePositionX����ȡ����X����
	 * @return ����ֵ�������X����
	 */
	public float		GetSpritePositionX()
	{
		return EngineAPI.GetSpritePositionX( GetName() );
	}

	/**
	 * GetSpritePositionY����ȡ����Y����
	 * ����ֵ�������Y����
	 */
	public float		GetSpritePositionY()
	{
		return EngineAPI.GetSpritePositionY( GetName() );
	}

	/**
	 * GetSpriteLinkPointPosX����ȡ�������ӵ�X���ꡣ���ӵ��������ھ����һ������㣬�����ڱ༭�������ӻ���ɾ��
	 * @param ���� iId�����ӵ���ţ���һ��Ϊ1���������εݼ�
	 * @return ���ӵ�X����
	 */
	public float		GetSpriteLinkPointPosX(  int iId )
	{
		return EngineAPI.GetSpriteLinkPointPosX( GetName(), iId );
	}

	/**
	 * GetSpriteLinkPointPosY����ȡ�������ӵ�Y���ꡣ���ӵ��������ھ����һ������㣬�����ڱ༭�������ӻ���ɾ��
	 * @param ���� iId�����ӵ���ţ���һ��Ϊ1���������εݼ�
	 * @return ���ӵ�Y����
	 */
	public float		GetSpriteLinkPointPosY(  int iId )
	{
		return EngineAPI.GetSpriteLinkPointPosY( GetName(), iId );
	}

	/**
	 * SetSpriteRotation�����þ������ת�Ƕ�
	 * @param ���� fRot����ת�Ƕȣ���Χ0 - 360
	 */
	public void		SetSpriteRotation(  float fRot )
	{
		EngineAPI.SetSpriteRotation( GetName(), fRot );
	}

	/**
	 * GetSpriteRotation����ȡ�������ת�Ƕ�
	 * @return ����ֵ���������ת�Ƕ�
	 */
	public float		GetSpriteRotation()
	{
		return EngineAPI.GetSpriteRotation( GetName() );
	}

	/**
	 * SetSpriteAutoRot�����þ��鰴��ָ���ٶ��Զ���ת
	 * @param ���� fRotSpeed����ת�ٶ�
	 */
	public void 		SetSpriteAutoRot(  float fRotSpeed )
	{
		EngineAPI.SetSpriteAutoRot( GetName(), fRotSpeed );
	}

	/**
	 * SetSpriteWidth�����þ������ο��
	 * @param ���� fWidth�����ֵ������0
	 */
	public void		SetSpriteWidth(  float fWidth )
	{
		EngineAPI.SetSpriteWidth( GetName(), fWidth );
	}

	/**
	 * GetSpriteWidth����ȡ�������ο��
	 * @return ����ֵ��������ֵ
	 */
	public float		GetSpriteWidth()
	{
		return EngineAPI.GetSpriteWidth( GetName() );
	}

	/**
	 * SetSpriteHeight�����þ������θ߶�
	 * @param ���� fHeight������߶�ֵ
	 */
	public void		SetSpriteHeight(  float fHeight )
	{
		EngineAPI.SetSpriteHeight( GetName(), fHeight );
	}

	/**
	 * GetSpriteHeight����ȡ�������θ߶�
	 * @return ����ֵ������߶�ֵ
	 */
	public float		GetSpriteHeight()
	{
		return EngineAPI.GetSpriteHeight( GetName() );
	}

	/**
	 * SetSpriteFlipX�����þ���ͼƬX����ת��ʾ
	 * @param ���� bFlipX��true ��ת false����ת(�ָ�ԭ������)
	 */
	public void		SetSpriteFlipX( boolean bFlipX )
	{
		EngineAPI.SetSpriteFlipX( GetName(), bFlipX );
	}
	
	/**
	 * GetSpriteFlipX����ȡ��ǰ����ͼƬX�����Ƿ��Ƿ�ת��ʾ
	 * @return ����ֵ��true ��ת false����ת
	 */
	public boolean		GetSpriteFlipX()
	{
		return EngineAPI.GetSpriteFlipX( GetName() );
	}

	/**
	 * SetSpriteFlipY�����þ���ͼƬY����ת��ʾ
	 * @param ���� bFlipY��true ��ת false����ת(�ָ�ԭ������)
	 */
	public void		SetSpriteFlipY( boolean bFlipY )
	{
		EngineAPI.SetSpriteFlipY( GetName(), bFlipY );
	}

	/**
	 * GetSpriteFlipY����ȡ��ǰ����ͼƬY�����Ƿ��Ƿ�ת��ʾ
	 * @return ����ֵ��true ��ת false����ת
	 */
	public boolean		GetSpriteFlipY()
	{
		return EngineAPI.GetSpriteFlipY( GetName() );
	}

	/**
	 * SetSpriteFlip��ͬʱ���þ��鷭תX��Y����
	 * @param ���� bFlipX��true ��ת false����ת(�ָ�ԭ������)
	 * @param ���� bFlipY��true ��ת false����ת(�ָ�ԭ������)
	 */
	public void		SetSpriteFlip( boolean bFlipX, boolean bFlipY )
	{
		EngineAPI.SetSpriteFlip( GetName(), bFlipX, bFlipY );
	}

	/**
	 * SetSpriteLifeTime�����þ��������ʱ����ʱ�䵽��֮���Զ���ɾ��
	 * @param ���� fLifeTime������ʱ������λ ��
	 */
	public void		SetSpriteLifeTime(  float fLifeTime )
	{
		EngineAPI.SetSpriteLifeTime( GetName(), fLifeTime );
	}

	/**
	 * GetSpriteLifeTime����ȡ��������ʱ��
	 * @return ����ֵ������ʱ������λ ��
	 */
	public float		GetSpriteLifeTime()
	{
		return EngineAPI.GetSpriteLifeTime( GetName() );
	}

	/**
	 * SpriteMoveTo���þ��鰴�ո����ٶ��ƶ������������
	 * @param ���� fPosX���ƶ���Ŀ��X����ֵ
	 * @param ���� fPosY���ƶ���Ŀ��Y����ֵ
	 * @param ���� fSpeed���ƶ��ٶ�
	 * @param ���� bAutoStop���ƶ����յ�֮���Ƿ��Զ�ֹͣ
	 */
	public void		SpriteMoveTo(  float fPosX,  float fPosY,  float fSpeed, boolean bAutoStop )
	{
		EngineAPI.SpriteMoveTo( GetName(), fPosX, fPosY, fSpeed, bAutoStop );
	}

	/**
	 * SpriteRotateTo���þ��鰴�ո����ٶ���ת�������ĽǶ�
	 * @param ���� fRotation��������Ŀ����תֵ
	 * @param ���� fRotSpeed����ת�ٶ�
	 * @param ���� bAutoStop����ת���յ�֮���Ƿ��Զ�ֹͣ
	 */
	public void		SpriteRotateTo(  float fRotation,  float fRotSpeed, boolean bAutoStop )
	{
		EngineAPI.SpriteRotateTo( GetName(), fRotation, fRotSpeed, bAutoStop );
	}

	/**
	 * SetSpriteWorldLimit�����þ��������߽��������Ƽ���ײģʽ
	 * @param ���� Limit����ײ������߽�֮�����Ӧģʽ�����ΪOFF�����ǹر�����߽���ײ������ֵ�� EWorldLimit
	 * @param ���� fLeft���߽�����X����
	 * @param ���� fTop���߽���ϱ�Y����
	 * @param ���� fRight���߽���ұ�X����
	 * @param ���� fBottom���߽���±�Y����
	 */
	public void		SetSpriteWorldLimit(  int Limit,  float fLeft,  float fTop,  float fRight,  float fBottom )
	{
		EngineAPI.SetSpriteWorldLimit( GetName(), (int)Limit, fLeft, fTop, fRight, fBottom );
	}

	/**
	 * SetSpriteWorldLimitMode�����þ��������߽���ײģʽ
	 * @param ���� Limit����ײ������߽�֮�����Ӧģʽ�����ΪOFF�����ǹر�����߽���ײ������ֵ�� EWorldLimit
	 */
	public void		SetSpriteWorldLimitMode(  int Limit )
	{
		EngineAPI.SetSpriteWorldLimitMode( GetName(), (int)Limit );
	}

	/**
	 * SetSpriteWorldLimitMin�����þ��������߽��ϱ߼������������
	 * @param ���� fLeft���߽�����X����
	 * @param ���� fTop���߽���ϱ�Y����
	 */
	public void		SetSpriteWorldLimitMin(  float fLeft,  float fTop )
	{
		EngineAPI.SetSpriteWorldLimitMin( GetName(), fLeft, fTop );
	}

	/**
	 * SetSpriteWorldLimitMax�����þ��������߽��±߼��ұ���������
	 * @param ���� fRight���߽���ұ�X����
	 * @param ���� fBottom���߽���±�Y����
	 */
	public void		SetSpriteWorldLimitMax(  float fRight,  float fBottom )
	{
		EngineAPI.SetSpriteWorldLimitMax( GetName(), fRight, fBottom );
	}

	/**
	 * GetSpriteWorldLimitLeft����ȡ��������߽���߽�����
	 * @return ��������߽����߽����� ֵ
	 */
	public float GetSpriteWorldLimitLeft()
	{
		return EngineAPI.GetSpriteWorldLimitLeft(GetName());
	}

	/**
	 * GetSpriteWorldLimitLeft����ȡ��������߽��ϱ߽�����
	 * @return ��������߽���ϱ߽�����ֵ
	 */
	public float GetSpriteWorldLimitTop()
	{
		return EngineAPI.GetSpriteWorldLimitTop(GetName());
	}

	/**
	 * GetSpriteWorldLimitLeft����ȡ��������߽��ұ߽�����
	 * @return ��������߽���ұ߽�����ֵ
	 */
	public float GetSpriteWorldLimitRight()
	{
		return EngineAPI.GetSpriteWorldLimitRight(GetName());
	}

	/**
	 * GetSpriteWorldLimitLeft����ȡ��������߽��±߽�����
	 * @return ��������߽���±߽�����ֵ
	 */
	public float GetSpriteWorldLimitBottom()
	{
		return EngineAPI.GetSpriteWorldLimitBottom(GetName());
	}

	/**
	 * SetSpriteCollisionSend�����þ����Ƿ���Է���(����)��ײ
	 * �������ײ��ʽΪ����A�ƶ�������Bʱ�����A�ǿ��Բ�����ײ�ģ�B�ǿ��Խ�����ײ�ģ�����2������������ײ��������ײ��API�������á���������ײ����
	 * @param ���� bSend��true ���Բ��� false ������
	 */
	public void 		SetSpriteCollisionSend( boolean bSend )
	{
		EngineAPI.SetSpriteCollisionSend( GetName(), bSend );
	}

	/**
	 * SetSpriteCollisionReceive�����þ����Ƿ���Խ�����ײ
	 * �������ײ��ʽΪ����A�ƶ�������Bʱ�����A�ǿ��Բ�����ײ�ģ�B�ǿ��Խ�����ײ�ģ�����2������������ײ��������ײ��API�������á���������ײ����
	 * @param ���� bReceive��true ���Խ��� false ������
	 */
	public void 		SetSpriteCollisionReceive( boolean bReceive )
	{
		EngineAPI.SetSpriteCollisionReceive( GetName(), bReceive );
	}

	/**
	 * SetSpriteCollisionActive��ͬʱ���þ����Ƿ���Բ�����������ײ
	 * �������ײ��ʽΪ����A�ƶ�������Bʱ�����A�ǿ��Բ�����ײ�ģ�B�ǿ��Խ�����ײ�ģ�����2������������ײ��������ײ��API�������á���������ײ����
	 * @param ���� bSend��true ���Բ��� false ������
	 * @param ���� bReceive��true ���Խ��� false ������
	 */
	public void 		SetSpriteCollisionActive( boolean bSend, boolean bReceive )
	{
		EngineAPI.SetSpriteCollisionActive( GetName(), bSend, bReceive );
	}

	/**
	 * SetSpriteCollisionPhysicsSend�����þ����Ƿ���Է���(����)��ײ
	 * @param ���� bSend��true ���Բ��� false ������
	 */
	public void 		SetSpriteCollisionPhysicsSend( boolean bSend )
	{
		EngineAPI.SetSpriteCollisionPhysicsSend( GetName(), bSend );
	}

	/**
	 * SetSpriteCollisionPhysicsReceive�����þ����Ƿ���Խ�����ײ
	 * @param ���� bReceive��true ���Խ��� false ������
	 */
	public void 		SetSpriteCollisionPhysicsReceive( boolean bReceive )
	{
		EngineAPI.SetSpriteCollisionPhysicsReceive( GetName(), bReceive );
	}

	/**
	 * GetSpriteCollisionSend����ȡ���鵱ǰ�Ƿ��ǿ��Բ�����ײ
	 * @return ����ֵ��true ���Բ��� false ������
	 */
	public boolean 		GetSpriteCollisionSend()
	{
		return EngineAPI.GetSpriteCollisionSend( GetName() );
	}

	/**
	 * GetSpriteCollisionReceive����ȡ���鵱ǰ�Ƿ��ǿ��Խ�����ײ
	 * @return ����ֵ��true ���Խ��� false ������
	 */
	public boolean 		GetSpriteCollisionReceive()
	{
		return EngineAPI.GetSpriteCollisionReceive( GetName() );
	}

	/**
	 * SetSpriteCollisionResponse�����þ����뾫�����ײ��Ӧģʽ
	 * @param ���� Response����Ӧģʽ�����ΪOFF����Ϊ�ر���ײ��Ӧ����ײAPI�����ᱻ���á�����ֵ�� ECollisionResponse
	 */
	public void		SetSpriteCollisionResponse(  int Response )
	{
		EngineAPI.SetSpriteCollisionResponse( GetName(), (int)Response );
	}

	/**
	 * SetSpriteCollisionMaxIterations�����þ�����ײ֮�����󷴵�����
	 * @param ���� iTimes����������
	 */
	public void		SetSpriteCollisionMaxIterations(  int iTimes )
	{
		EngineAPI.SetSpriteCollisionMaxIterations( GetName(), iTimes );
	}

	/**
	 * SetSpriteForwardMovementOnly�����þ����Ƿ�ֻ�ܳ�ǰ�ƶ�
	 * @param ���� bForward��true ֻ�ܳ�ǰ�ƶ� false ���Գ����������ƶ�
	 */
	public void		SetSpriteForwardMovementOnly( boolean bForward )
	{
		EngineAPI.SetSpriteForwardMovementOnly( GetName(), bForward );
	}

	/**
	 * GetSpriteForwardMovementOnly����ȡ���鵱ǰ�Ƿ�ֻ�ܳ�ǰ�ƶ�
	 * @return ����ֵ��true ֻ�ܳ�ǰ�ƶ� false ���Գ����������ƶ�
	 */
	public boolean		GetSpriteForwardMovementOnly()
	{
		return EngineAPI.GetSpriteForwardMovementOnly( GetName() );
	}

	/**
	 * SetSpriteForwardSpeed�����þ�����ǰ���ٶ�
	 * @param ���� fSpeed���ٶ�
	 */
	public void		SetSpriteForwardSpeed(  float fSpeed )
	{
		EngineAPI.SetSpriteForwardSpeed( GetName(), fSpeed );
	}

	/**
	 * SetSpriteImpulseForce�����þ���˲������
	 * @param ���� fForceX��X����������С
	 * @param ���� fForceY��Y����������С
	 * @param ���� bGravitic���Ƿ��������
	 */
	public void 		SetSpriteImpulseForce(  float fForceX,  float fForceY, boolean bGravitic )
	{
		EngineAPI.SetSpriteImpulseForce( GetName(), fForceX, fForceY, bGravitic );
	}

	/**
	 * SetSpriteImpulseForcePolar�����Ƕȳ������þ���˲������
	 * @param ���� fPolar���Ƕȳ���
	 * @param ���� fForce��������С
	 * @param ���� bGravitic���Ƿ��������
	 */
	public void 		SetSpriteImpulseForcePolar(  float fPolar,  float fForce, boolean bGravitic )
	{
		EngineAPI.SetSpriteImpulseForcePolar( GetName(), fPolar, fForce, bGravitic );
	}

	/**
	 * SetSpriteConstantForceX�����þ���X����������
	 * @param ���� fForceX��X����������С
	 */
	public void 		SetSpriteConstantForceX(  float fForceX )
	{
		EngineAPI.SetSpriteConstantForceX( GetName(), fForceX );
	}

	/**
	 * SetSpriteConstantForceY�����þ���Y����������
	 * @param ���� fForceY��Y����������С
	 */
	public void 		SetSpriteConstantForceY(  float fForceY )
	{
		EngineAPI.SetSpriteConstantForceY( GetName(), fForceY );
	}

	/**
	 * SetSpriteConstantForceGravitic�������ڼ��㳣��������ʱ���Ƿ��������
	 * @param ���� bGravitic���Ƿ��������
	 */
	public void 		SetSpriteConstantForceGravitic( boolean bGravitic )
	{
		EngineAPI.SetSpriteConstantForceGravitic( GetName(), bGravitic );
	}

	/**
	 * SetSpriteConstantForce�����þ��鳣������
	 * @param ���� fForceX��X����������С
	 * @param ���� fForceY��Y����������С
	 * @param ���� bGravitic���Ƿ��������
	 */
	public void 		SetSpriteConstantForce(  float fForceX,  float fForceY, boolean bGravitic )
	{
		EngineAPI.SetSpriteConstantForce( GetName(), fForceX, fForceY, bGravitic );
	}

	/**
	 * SetSpriteConstantForcePolar�����Ƕȳ������þ��鳣������
	 * @param ���� fPolar���Ƕȳ���
	 * @param ���� fForce��������С
	 * @param ���� bGravitic���Ƿ��������
	 */
	public void 		SetSpriteConstantForcePolar(  float fPolar,  float fForce, boolean bGravitic )
	{
		EngineAPI.SetSpriteConstantForcePolar( GetName(), fPolar, fForce, bGravitic );
	}

	/**
	 * StopSpriteConstantForce��ֹͣ���鳣������
	 */
	public void 		StopSpriteConstantForce()
	{
		EngineAPI.StopSpriteConstantForce( GetName() );
	}

	/**
	 * SetSpriteForceScale�����������ž��鵱ǰ�ܵ�����
	 * @param ���� fScale������ֵ
	 */
	public void 		SetSpriteForceScale(  float fScale )
	{
		EngineAPI.SetSpriteForceScale( GetName(), fScale );
	}

	/**
	 * SetSpriteAtRest����ͣ/��������ĸ�����������
	 * @param ���� bRest��true ��ͣ false ����
	 */
	public void 		SetSpriteAtRest( boolean bRest )
	{
		EngineAPI.SetSpriteAtRest( GetName(), bRest );
	}

	/**
	 * GetSpriteAtRest����ȡ���鵱ǰ�Ƿ�����ͣ��
	 * @return ����ֵ��true ��ͣ�� false ����
	 */
	public boolean 		GetSpriteAtRest( )
	{
		return EngineAPI.GetSpriteAtRest( GetName() );
	}

	/**
	 * SetSpriteFriction�����þ���Ħ����
	 * @param ���� fFriction��Ħ������С
	 */
	public void 		SetSpriteFriction(  float fFriction )
	{
		EngineAPI.SetSpriteFriction( GetName(), fFriction );
	}

	/**
	 * SetSpriteRestitution�����þ��鵯��
	 * @param ���� fRestitution������ֵ��С
	 */
	public void 		SetSpriteRestitution(  float fRestitution )
	{
		EngineAPI.SetSpriteRestitution( GetName(), fRestitution );
	}

	/**
	 * SetSpriteMass�����þ�������
	 * @param ���� fMass��������С
	 */
	public void 		SetSpriteMass(  float fMass )
	{
		EngineAPI.SetSpriteMass( GetName(), fMass );
	}

	/**
	 * GetSpriteMass����ȡ��������
	 * @return ����ֵ ��������С
	 */
	public float 		GetSpriteMass()
	{
		return EngineAPI.GetSpriteMass( GetName() );
	}

	/**
	 * SetSpriteAutoMassInertia���������߹رվ������
	 * @param ���� bStatus��true ���� false �ر�
	 */
	public void 		SetSpriteAutoMassInertia( boolean bStatus )
	{
		EngineAPI.SetSpriteAutoMassInertia( GetName(), bStatus );
	}

	/**
	 * SetSpriteInertialMoment�����þ�����Դ�С
	 * @param ���� fInert�����Դ�С
	 */
	public void 		SetSpriteInertialMoment(  float fInert )
	{
		EngineAPI.SetSpriteInertialMoment( GetName(), fInert );
	}

	/**
	 * SetSpriteDamping�����þ���˥��ֵ
	 * @param ���� fDamp��˥��ֵ��С
	 */
	public void 		SetSpriteDamping(  float fDamp )
	{
		EngineAPI.SetSpriteDamping( GetName(), fDamp );
	}

	/**
	 * SetSpriteImmovable�����þ����Ƿ񲻿��ƶ�
	 * @param ���� bImmovable��true �������ƶ� false �����ƶ�
	 */
	public void 		SetSpriteImmovable( boolean bImmovable )
	{
		EngineAPI.SetSpriteImmovable( GetName(), bImmovable );
	}

	/**
	 * GetSpriteImmovable����ȡ���鵱ǰ�Ƿ񲻿����ƶ�
	 * @return ����ֵ��true �������ƶ� false �����ƶ�
	 */
	public boolean 		GetSpriteImmovable()
	{
		return EngineAPI.GetSpriteImmovable( GetName() );
	}

	/**
	 * SetSpriteLinearVelocity�����þ����ƶ��ٶ�
	 * @param ���� fVelX��X�����ٶ�
	 * @param ���� fVelY��Y�����ٶ�
	 */
	public void 		SetSpriteLinearVelocity(  float fVelX,  float fVelY )
	{
		EngineAPI.SetSpriteLinearVelocity( GetName(), fVelX, fVelY );
	}

	/**
	 * SetSpriteLinearVelocityX�����þ���X�����ƶ��ٶ�
	 * @param ���� fVelX��X�����ٶ�
	 */
	public void 		SetSpriteLinearVelocityX(  float fVelX )
	{
		EngineAPI.SetSpriteLinearVelocityX( GetName(), fVelX );
	}

	/**
	 * SetSpriteLinearVelocityY�����þ���Y�����ƶ��ٶ�
	 * @param ���� fVelY��Y�����ٶ�
	 */
	public void 		SetSpriteLinearVelocityY(  float fVelY )
	{
		EngineAPI.SetSpriteLinearVelocityY( GetName(), fVelY );
	}

	/**
	 * SetSpriteLinearVelocityPolar�����Ƕȳ������þ����ƶ��ٶ�
	 * @param ���� fSpeed���ƶ��ٶ�
	 * @param ���� fPolar���Ƕȳ���
	 */
	public void 		SetSpriteLinearVelocityPolar(  float fSpeed,  float fPolar )
	{
		EngineAPI.SetSpriteLinearVelocityPolar( GetName(), fSpeed, fPolar );
	}

	/**
	 * SetSpriteAngularVelocity�����þ���Ƕ���ת�ٶ�
	 * @param ���� fAngular���Ƕ���ת�ٶ�
	 */
	public void 		SetSpriteAngularVelocity(  float fAngular )
	{
		EngineAPI.SetSpriteAngularVelocity( GetName(), fAngular );
	}

	/**
	 * SetSpriteMinLinearVelocity�����þ�����С�ٶ�
	 * @param ���� fMin����С�ٶ�ֵ
	 */
	public void 		SetSpriteMinLinearVelocity(  float fMin )
	{
		EngineAPI.SetSpriteMinLinearVelocity( GetName(), fMin );
	}

	/**
	 * SetSpriteMaxLinearVelocity�����þ�������ٶ�
	 * @param ���� fMax������ٶ�ֵ
	 */
	public void 		SetSpriteMaxLinearVelocity(  float fMax )
	{
		EngineAPI.SetSpriteMaxLinearVelocity( GetName(), fMax );
	}

	/**
	 * SetSpriteMinAngularVelocity�����þ�����С���ٶ�
	 * @param ���� fMin����С���ٶ�
	 */
	public void 		SetSpriteMinAngularVelocity(  float fMin )
	{
		EngineAPI.SetSpriteMinAngularVelocity( GetName(), fMin );
	}

	/**
	 * SetSpriteMaxAngularVelocity�����þ��������ٶ�
	 * @param ���� fMax�������ٶ�
	 */
	public void 		SetSpriteMaxAngularVelocity(  float fMax )
	{
		EngineAPI.SetSpriteMaxAngularVelocity( GetName(), fMax );
	}

	/**
	 * GetSpriteLinearVelocityX����ȡ����X�����ٶ�
	 * @return ����ֵ��X�����ٶ�
	 */
	public float 		GetSpriteLinearVelocityX()
	{
		return EngineAPI.GetSpriteLinearVelocityX( GetName() );
	}

	/**
	 * GetSpriteLinearVelocityY����ȡ����Y�����ٶ�
	 * @return ����ֵ��Y�����ٶ�
	 */
	public float 		GetSpriteLinearVelocityY()
	{
		return EngineAPI.GetSpriteLinearVelocityY( GetName() );
	}

	/**
	 * SpriteMountToSprite����һ������󶨵���һ�������ϣ���ʱ�ĳ�Ϊ��һ�������һ���֣��������˶���
	 * @param ���� szDstName�����ذ󶨵�ĸ�徫������
	 * @param ���� fOffSetX����ƫ��X
	 * @param ���� fOffsetY����ƫ��Y
	 * @return ����ֵ������һ����ID
	 */
	public int			SpriteMountToSprite( String szDstName,  float fOffSetX,  float fOffsetY )
	{
		return EngineAPI.SpriteMountToSprite( GetName(), szDstName, fOffSetX, fOffsetY );
	}

	/**
	 * SpriteMountToSpriteLinkPoint����һ������󶨵���һ�������ϣ���λ��Ϊָ�������ӵ㣬��ʱ�ĳ�Ϊ��һ�������һ���֣��������˶���
	 * @param ���� szDstName�����ذ󶨵�ĸ�徫������
	 * @param ���� iPointId�����ӵ����
	 * @return ����ֵ������һ����ID
	 */
	public int			SpriteMountToSpriteLinkPoint( String szDstName,  int iPointId )
	{
		return EngineAPI.SpriteMountToSpriteLinkPoint( GetName(), szDstName, iPointId );
	}

	/**
	 * SetSpriteMountRotation�����þ���İ󶨳��򣬼������ĸ��ĳ���
	 * @param ���� fRot���Ƕȳ���0 - 360
	 */
	public void		SetSpriteMountRotation(  float fRot )
	{
		EngineAPI.SetSpriteMountRotation( GetName(), fRot );
	}

	/**
	 * GetSpriteMountRotation����ȡ����İ󶨳��򣬼������ĸ��ĳ���
	 * @return ����ֵ���Ƕȳ���
	 */
	public float		GetSpriteMountRotation()
	{
		return EngineAPI.GetSpriteMountRotation( GetName() );
	}

	/**
	 * SetSpriteAutoMountRotation�����þ����֮���Զ���ת
	 * @param ���� fRot����ת�ٶ�
	 */
	public void		SetSpriteAutoMountRotation(  float fRot )
	{
		EngineAPI.SetSpriteAutoMountRotation( GetName(), fRot );
	}

	/**
	 * GetSpriteAutoMountRotation����ȡ�����֮����Զ���תֵ
	 * @return ����ֵ����ת�ٶ�
	 */
	public float		GetSpriteAutoMountRotation()
	{
		return EngineAPI.GetSpriteAutoMountRotation( GetName() );
	}

	/**
	 * SetSpriteMountForce��������һ������ʱ�����ӵ�������
	 * @param ���� fFroce��������
	 */
	public void		SetSpriteMountForce(  float fForce )
	{
		EngineAPI.SetSpriteMountForce( GetName(), fForce );
	}

	/**
	 * SetSpriteMountTrackRotation���󶨵ľ����Ƿ����ĸ����ת
	 * @param ���� bTrackRotation��true ���� false ������
	 */
	public void		SetSpriteMountTrackRotation( boolean bTrackRotation )
	{
		EngineAPI.SetSpriteMountTrackRotation( GetName(), bTrackRotation );
	}

	/**
	 * SetSpriteMountOwned��ĸ�屻ɾ����ʱ�򣬰󶨵ľ����Ƿ�Ҳ���ű�ɾ��
	 * @param ���� bMountOwned��true ���� false ������
	 */
	public void		SetSpriteMountOwned( boolean bMountOwned )
	{
		EngineAPI.SetSpriteMountOwned( GetName(), bMountOwned );
	}

	/**
	 * SetSpriteMountInheritAttributes���󶨵�ʱ���Ƿ�̳�ĸ�������
	 * @param ���� bInherAttr��true �̳� false ���̳�
	 */
	public void		SetSpriteMountInheritAttributes( boolean bInherAttr )
	{
		EngineAPI.SetSpriteMountInheritAttributes( GetName(), bInherAttr );
	}

	/**
	 * SpriteDismount�����Ѿ��󶨵ľ�����н��
	 */
	public void		SpriteDismount()
	{
		EngineAPI.SpriteDismount( GetName() );
	}

	/**
	 * GetSpriteIsMounted���жϾ����Ƿ������һ��������
	 * @return ����ֵ��true �� false ����
	 */
	public boolean		GetSpriteIsMounted()
	{
		return EngineAPI.GetSpriteIsMounted( GetName() );
	}

	/**
	 * GetSpriteMountedParent����ȡ�󶨵�ĸ�徫�������
	 * @return ����ֵ��ĸ�徫�����֣����δ�󶨣��򷵻ؿ��ַ���
	 */
	public String	GetSpriteMountedParent()
	{
		return EngineAPI.GetSpriteMountedParent( GetName() );
	}

	/**
	 * SetSpriteColorRed�����ľ�����ʾ��ɫ�еĺ�ɫ��Ĭ�Ͼ���ĺ���������ɫ��ֵ��Ϊ255���޸�����һ����Ըı�����ɫ
	 * @param ���� iCol����ɫ��Χ 0 - 255
	 */
	public void		SetSpriteColorRed(  int iCol )
	{
		EngineAPI.SetSpriteColorRed( GetName(), iCol );
	}

	/**
	 * SetSpriteColorGreen�����ľ�����ʾ��ɫ�е���ɫ��Ĭ�Ͼ���ĺ���������ɫ��ֵ��Ϊ255���޸�����һ����Ըı�����ɫ
	 * @param ���� iCol����ɫ��Χ 0 - 255
	 */
	public void		SetSpriteColorGreen(  int iCol )
	{
		EngineAPI.SetSpriteColorGreen( GetName(), iCol );
	}

	/**
	 * SetSpriteColorBlue�����ľ�����ʾ��ɫ�е���ɫ��Ĭ�Ͼ���ĺ���������ɫ��ֵ��Ϊ255���޸�����һ����Ըı�����ɫ
	 * @param ���� iCol����ɫ��Χ 0 - 255
	 */
	public void		SetSpriteColorBlue(  int iCol )
	{
		EngineAPI.SetSpriteColorBlue( GetName(), iCol );
	}

	/**
	 * SetSpriteColorAlpha�����þ���͸����
	 * @param ���� iCol��͸���ȣ�ֵ0 - 255������ȫ͸������ȫ��͸��
	 */
	public void		SetSpriteColorAlpha(  int iCol )
	{
		EngineAPI.SetSpriteColorAlpha(  GetName(), iCol );
	}

	/**
	 * GetSpriteColorRed����ȡ������ʾ��ɫ�еĺ�ɫֵ
	 * @return ����ֵ����ɫֵ
	 */
	public int			GetSpriteColorRed()
	{
		return EngineAPI.GetSpriteColorRed( GetName() );
	}

	/**
	 * GetSpriteColorGreen����ȡ������ʾ��ɫ�е���ɫֵ
	 * @return ����ֵ����ɫֵ
	 */
	public int			GetSpriteColorGreen()
	{
		return EngineAPI.GetSpriteColorGreen( GetName() );
	}

	/**
	 * GetSpriteColorBlue����ȡ������ʾ��ɫ�е���ɫֵ
	 * @return ����ֵ����ɫֵ
	 */
	public int			GetSpriteColorBlue()
	{
		return EngineAPI.GetSpriteColorBlue( GetName() );
	}

	/**
	 * GetSpriteColorAlpha����ȡ����͸����
	 * @return ����ֵ��͸����
	 */
	public int			GetSpriteColorAlpha()
	{
		return EngineAPI.GetSpriteColorAlpha( GetName() );
	}
};