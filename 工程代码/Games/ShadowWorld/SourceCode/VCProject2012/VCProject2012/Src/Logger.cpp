#include "Logger.h"

//======================================================
/*
                        日志模块实现
*/
//======================================================

// [说明]
// 静态成员变量初始化
// 初始化日志文件流对象和日志记录状态
//____________________________________________________________________________________________________________
std::ofstream LogManager::logFile; // 日志文件流对象
bool LogManager::isLogging = false; // 日志记录状态，指示是否正在记录日志
//____________________________________________________________________________________________________________

// [说明]
// StartLogging 函数：开始记录日志
// 该函数用于启动日志记录，将日志输出到指定的文件
// 如果已经在记录日志，则先停止记录再重新启动
// 参数:
//   - filename: 日志文件的名称
// 异常:
//   - 如果无法打开指定的文件，则抛出 std::runtime_error 异常
//____________________________________________________________________________________________________________
void LogManager::StartLogging(const std::string& filename) {
    if (isLogging) {
        StopLogging(); // 如果已经在记录日志，先停止记录
    }
    logFile.open(filename, std::ios::out | std::ios::trunc); // 使用 std::ios::trunc 清空文件内容
    if (!logFile) {
        throw std::runtime_error("无法打开文件: " + filename); // 如果文件无法打开，抛出异常
    }
    isLogging = true; // 设置日志记录状态为 true
}
//____________________________________________________________________________________________________________

// [说明]
// StopLogging 函数：停止记录日志
// 该函数用于停止日志记录并关闭日志文件
// 如果当前未在记录日志，则此函数不执行任何操作
//____________________________________________________________________________________________________________
void LogManager::StopLogging() {
    if (!isLogging) return; // 如果当前未在记录日志，直接返回
    logFile.close(); // 关闭日志文件
    isLogging = false; // 设置日志记录状态为 false
}
//____________________________________________________________________________________________________________

// [说明]
// Log 函数：记录日志信息
// 该函数将指定的日志信息写入日志文件中
// 参数:
//   - message: 要记录的日志消息
// 注意:
//   - 仅当日志记录状态为 true 时才会写入日志
//____________________________________________________________________________________________________________
void LogManager::Log(const std::string& message) {
    if (isLogging) {
        logFile << message << std::endl; // 将日志消息写入文件，并添加换行符
    }
}
//____________________________________________________________________________________________________________
