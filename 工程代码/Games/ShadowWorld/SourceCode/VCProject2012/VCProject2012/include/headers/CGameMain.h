//====================================================================
/*
                        游戏框架系统类声明
*/
//====================================================================

#ifndef _LESSON_X_H_
#define _LESSON_X_H_

#include <Windows.h>
#include "headers/PlayerController.h"
#include <map>
#include "EntityManager.h"
#include "StateMachine.h"

// 游戏总管类。负责处理游戏主循环、游戏初始化、结束等工作
class CGameMain
{
private:
    int                m_iGameState;                // 游戏状态，0：结束或者等待开始；1：初始化；2：游戏进行中

    // 私有构造函数和析构函数，确保外部不能直接创建或销毁实例
    CGameMain();            // 构造函数
    ~CGameMain();           // 析构函数
public:
    StateMachine* stateMachine;

    // 静态方法获取唯一实例
    static CGameMain& GetInstance()
    {
        static CGameMain instance; // 局部静态变量，确保唯一性
        return instance;
    }

    // Get方法
    int GetGameState() const { return m_iGameState; }
    // Set方法
    void SetGameState(const int iState) { m_iGameState = iState; }
    // 游戏主循环等
    void GameMainLoop(float fDeltaTime);
    void GameInit();
    void GameRun(float fDeltaTime);
    void GameEnd();
    void OnMouseMove(const float fMouseX, const float fMouseY);
    void OnMouseClick(const int iMouseType, const float fMouseX, const float fMouseY);
    void OnMouseUp(const int iMouseType, const float fMouseX, const float fMouseY);
    void OnKeyDown(const int iKey, const bool bAltPress, const bool bShiftPress, const bool bCtrlPress);
    void OnKeyUp(const int iKey);
    void OnSpriteColSprite(const char* szSrcName, const char* szTarName);
    void OnSpriteColWorldLimit(const char* szName, const int iColSide);
};

#endif // _LESSON_X_H_
