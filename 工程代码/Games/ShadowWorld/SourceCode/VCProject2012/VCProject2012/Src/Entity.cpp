#include "Entity.h"
#include <iostream>

//======================================================
/*
                        Entity 类的实现
*/
//======================================================




// [说明]
// 构造函数：初始化实体
// 设置实体的初始位置、资源包名称，并初始化速度、ID 和资源包指针
// 参数:
//   - initialX: 实体的初始 X 坐标
//   - initialY: 实体的初始 Y 坐标
//   - resourceBagName: 资源包的名称
//____________________________________________________________________________________________________________
Entity::Entity(float initialX, float initialY, const std::string& resourceBagName)
    : posX(initialX), posY(initialY), velocityX(0), velocityY(0), ResourceBagName(resourceBagName), ID(""), resourceBagPtr(nullptr) {
}
//____________________________________________________________________________________________________________




// [说明]
// 析构函数：清理实体
// 释放实体的资源包指针，防止内存泄漏
//____________________________________________________________________________________________________________
Entity::~Entity() {
    // 这里可以添加额外的清理代码
}
//____________________________________________________________________________________________________________




// [说明]
// Init 函数：初始化实体
// 加载资源包，并设置实体的精灵位置
// 如果资源包指针为空，则创建并加载资源包
//____________________________________________________________________________________________________________
void Entity::Init() {  
    if (!resourceBagPtr) {
        resourceBagPtr = new ResourceBag(ID);
        this->resourceBagPtr->LoadFromJson(ResourceBagName);
        this->resourceBagPtr->GetResource<CSprite>("Entity")->SetSpritePosition(this->posX, this->posY);
    }
}
//____________________________________________________________________________________________________________




// [说明]
// breakdown 函数：清理实体
// 释放实体的资源包实例，防止内存泄漏
//____________________________________________________________________________________________________________
void Entity::breakdown() {  
    if (resourceBagPtr) {
        delete resourceBagPtr;
        resourceBagPtr = nullptr; // 释放后将指针置为 nullptr
    }
}
//____________________________________________________________________________________________________________




// [说明]
// Update 函数：更新实体
// 更新实体的状态、动画和声音
// 调用 UpdateState、UpdateAnimation 和 UpdateSound 函数
//____________________________________________________________________________________________________________
void Entity::Update() {
    UpdateState();
    UpdateAnimation();
    UpdateSound();
}
//____________________________________________________________________________________________________________




// [说明]
// ifCollision 函数：处理碰撞事件
// 处理与其他实体的碰撞事件
// 参数:
//   - otherEntity: 其他碰撞的实体
//____________________________________________________________________________________________________________
void Entity::ifCollision(Entity* otherEntity) {
    LogManager::Log("<发生碰撞>");
}
//____________________________________________________________________________________________________________




// [说明]
// GetPosX 函数：获取 X 坐标
// 返回实体的当前 X 坐标
//____________________________________________________________________________________________________________
float Entity::GetPosX() const {
    return posX;
}
//____________________________________________________________________________________________________________




// [说明]
// GetPosY 函数：获取 Y 坐标
// 返回实体的当前 Y 坐标
//____________________________________________________________________________________________________________
float Entity::GetPosY() const {
    return posY;
}
//____________________________________________________________________________________________________________




// [说明]
// GetVelocityX 函数：获取 X 方向速度
// 返回实体的当前 X 方向速度
//____________________________________________________________________________________________________________
float Entity::GetVelocityX() const {
    return velocityX;
}
//____________________________________________________________________________________________________________




// [说明]
// GetVelocityY 函数：获取 Y 方向速度
// 返回实体的当前 Y 方向速度
//____________________________________________________________________________________________________________
float Entity::GetVelocityY() const {
    return velocityY;
}
//____________________________________________________________________________________________________________




// [说明]
// SetPosition 函数：设置实体的位置
// 更新实体的 X 和 Y 坐标
// 参数:
//   - x: 新的 X 坐标
//   - y: 新的 Y 坐标
//____________________________________________________________________________________________________________
void Entity::SetPosition(float x, float y) {
    posX = x;
    posY = y;
}
//____________________________________________________________________________________________________________




// [说明]
// SetVelocity 函数：设置实体的速度
// 更新实体的 X 和 Y 方向速度
// 参数:
//   - vx: 新的 X 方向速度
//   - vy: 新的 Y 方向速度
//____________________________________________________________________________________________________________
void Entity::SetVelocity(float vx, float vy) {
    velocityX = vx;
    velocityY = vy;
}
//____________________________________________________________________________________________________________
